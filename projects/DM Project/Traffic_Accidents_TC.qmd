---
title: "Traffic Accidents in the Twin Cities Before and After COVID"
Author: "Joe Penders"
format: html
category: projects
self_contained: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
rm(list = ls())
options(scipen=999)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(lubridate)
library(reshape2)
library(corrplot)
library(rpart)
library(caret)
library(AppliedPredictiveModeling)
library(DALEX)
library(ggthemes)
library(pROC)
library(performanceEstimation)
library(glmnet)
library(fastDummies)
library(sf)
library(gbm)
library(pscl)
library(patchwork)
library(gridExtra)
```

In Spring of 2020 there was a noticeable shift in traffic patterns as a result of the COVID-19 pandemic. Many people were no longer commuting to work everyday, and years later this trend continues as working from home becomes more accepted as a permanent change. Understanding how the shift in traffic patterns affects the characteristics of car accidents will allow us to better allocate public funds for traffic engineering projects and hopefully minimize the rate and severity of accidents.

This dataset contains records of traffic accidents for the seven-county region overseen by the metropolitan council of the Twin Cities.

Traffic Accident data source: Sobhan Moosavi. (2023). <i>US Accidents (2016 - 2023)</i> \[Data set\]. Kaggle. https://doi.org/10.34740/KAGGLE/DS/199387

Minnesota shape files came from https://gisdata.mn.gov/organization/us-mn-state-dot

# Loading the data and creating new variables

```{r, results='hide'}
# read in the original, national dataset
# US_Accidents_March23 <- read_csv("US_Accidents_March23.csv")

# subset Minnesota
# mn <- US_Accidents_March23 %>%
# filter(State == "MN")
# write_csv(mn, "mn.csv")
# mn <- read_csv("mn.csv")
# mn <- mn %>% select(-"ID", -"Source", -"State", -"Country")

# subset counties in the Twin Cities metro area
# met <- mn %>%
#  filter(County %in% c('Anoka', 'Carver', 'Dakota', 'Hennepin', 'Ramsey',
#                       'Scott', 'Washington'))
# write_csv(met, "met.csv")
met = read_csv("met.csv")

# Sample 1000 random rows for testing purposes
# met_1k <- met %>% sample_n(1000)
# write_csv(met_1k, "met_1k.csv")

# Load the shapefile for streets
streets <- st_read("./streets/STREETS_LOAD.shp")

# Load the shape file for county boundaries
counties <- st_read("counties/mn_county_boundaries_1000.shp")
```

```{r}
# Creating New Variables
# Create COVID variable
met$post_covid <- ifelse(met$Start_Time < as.POSIXct("2020-03-01", tz = "UTC-6"), 
                      0, 1)

# Day of week variable (0 = Sunday, 6 = Saturday)
met$Day_of_Week <- as.integer(format(met$Start_Time, "%w"))

# Create the binary 'weekday' variable (1 for weekdays, 0 for weekends)
met$is_weekday <- ifelse(met$Day_of_Week >= 1 & met$Day_of_Week <= 5, 1, 0)

# Month variable
met$Month <- as.integer(format(met$Start_Time, "%m"))

# Create the 'season' variable
met$season <- ifelse(met$Month %in% c(3, 4, 5), "Spring",
                ifelse(met$Month %in% c(6, 7, 8), "Summer",
                  ifelse(met$Month %in% c(9, 10, 11), "Autumn",
                    "Winter")))

# Create rush hour variable
# Extract hour from the Start_Time column
met$start_hour <- as.integer(format(met$Start_Time, "%H"))

# rush hour variable, 1 if the hour is between 6 and 9 or between 15 and 18 on weekdays, 0 otherwise
met$rush_hr <- ifelse(met$is_weekday == 1 & (met$start_hour >= 6 & met$start_hour <= 9 | met$start_hour >= 15 & met$start_hour <= 18), 1, 0)

# Drop no longer needed variables
met$Day_of_Week <- NULL
met$Month <- NULL
```

```{r, results='hide'}
# Convert the data frame to an sf object
met_sf <- st_as_sf(met, coords = c("Start_Lng", "Start_Lat"), crs = 4326, agr = "constant")

# Check the CRS for both datasets
crs_streets <- st_crs(streets)
crs_met <- st_crs(met_sf)

# Transform the projection of the accidents data to match the streets data, if different
if (crs_streets$epsg != crs_met$epsg) {
  met_sf <- st_transform(met_sf, crs_streets)
}

# Remove extra dimensions from spatial data
streets <- sf::st_zm(streets)
counties <- sf::st_zm(counties)
met_sf <- sf::st_zm(met_sf)
```

# Exploratory data analysis

### Locations of Traffic Accidents in Twin Cities Metro (June 2016 through March 2023)

```{r fig.width=12, fig.height=12}
# Get the bounding box of the accidents data
bbox_met <- st_bbox(met_sf)

# Accident Map TC metro
ggplot() +
  geom_sf(data = streets) + 
  geom_sf(data = counties, color = "green4", fill = NA, size = 5) +
  geom_sf(data = met_sf, aes(color = factor(post_covid)), size = .8, alpha = .5) +
  scale_color_manual(
    values = c("0" = "#0066FF", "1" = "red"),
    name = "COVID Period",
    labels = c("0" = "Pre-COVID", "1" = "Post-COVID")
  ) +
  geom_sf_label(data = counties, aes(label = CTY_NAME), size = 4, color = "green4") +
  coord_sf(xlim = bbox_met[c('xmin', 'xmax')], ylim = bbox_met[c('ymin', 'ymax')], expand = FALSE) +
  ggtitle("Locations of Traffic Accidents in Twin Cities Metro (June 2016 through March 2023)") +
  theme(
    plot.title = element_text(size = rel(1.5)),
    axis.title.x = element_blank(), 
    axis.title.y = element_blank(),
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 14)) +
  guides(color = guide_legend(override.aes = list(size = 5)))
```

It appears that after COVID, a greater proportion of accidents may be happening in the suburbs as fewer people commute to the core cities. Indeed, pre-COVID 72.2% of accidents in the metro occurred in just Hennepin and Ramsey counties, while post-COVID the proportion was down to 69.1%

```{r, include=FALSE}
# Filter data for Ramsey and Hennepin counties (Twin Cities)
TC <- met %>%
  filter(County %in% c("Ramsey", "Hennepin"))

# Group by post_covid and calculate the counts for the Twin Cities
TC_grouped <- TC %>%
  group_by(post_covid) %>%
  summarise(total_TC_accidents = n())

# Calculate the total accidents pre and post COVID for the entire dataset
total_metro_accidents <- met %>%
  group_by(post_covid) %>%
  summarise(total_metro_accidents = n())

# Join to get proportions
proportions <- left_join(TC_grouped, total_metro_accidents, by = "post_covid") %>%
  mutate(proportion = total_TC_accidents / total_metro_accidents)

# Display the result
print(proportions)
```

### Top 20 Streets by Number of Accidents, Before & After COVID

```{r, fig.width=10, fig.height=10}
# Filter accidents pre-covid
accidents_pre_covid <- met %>%
  filter(post_covid == 0)

# Filter accidents post-covid
accidents_post_covid <- met %>%
  filter(post_covid == 1)

# Get the count of accidents for each street pre-covid
top20_pre_covid <- accidents_pre_covid %>%
  count(Street) %>% 
  top_n(20, n)

# Get the count of accidents for each street post-covid
top20_post_covid <- accidents_post_covid %>%
  count(Street) %>% 
  top_n(20, n) 

# Find the maximum number of accidents to set the same x-axis limit for both plots
max_accidents <- max(c(top20_pre_covid$n, top20_post_covid$n))

# Pre-COVID plot
plot_pre_covid <- ggplot(top20_pre_covid, aes(x = reorder(Street, n), y = n)) +
  geom_bar(stat = "identity", fill = "#0066FF") +
  geom_text(aes(label = Street), vjust = 0.4, hjust = -0.2, color = "black", size = 3.0) +
  coord_flip() +
  labs(title = "Top 20 Streets by Number of Accidents (Pre-COVID)", x = NULL, y = NULL) +
  ylim(0, max_accidents) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank()
  )


# Post-COVID plot
plot_post_covid <- ggplot(top20_post_covid, aes(x = reorder(Street, n), y = n)) +
  geom_bar(stat = "identity", fill = "red") +
  geom_text(aes(label = Street), vjust = 0.4, hjust = -0.2, color = "black", size = 3.0) +
  coord_flip() +
  labs(title = "Top 20 Streets by Number of Accidents (Post-COVID)", x = NULL, y = "Number of Accidents") +
  ylim(0, max_accidents) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank()
  )

# Align the plots vertically
grid.arrange(plot_pre_covid, plot_post_covid, ncol = 1)

```

These counts by street are for the entire periods of June 2016 through February 2020, and March 2020 through March 2023, pertaining to the pre and post COVID periods, respectively. This means there are 45 months worth of data for the pre-COVID period and 37 months of data for the post-COVID period.

### Weekly Accidents Rate in the Twin Cities Metro

```{r fig.width=10, fig.height=4, warning=FALSE, message=FALSE}
# Get weekly incidents by season
weekly_incidents_by_season <- met %>%
  mutate(Week = as.Date(floor_date(Start_Time, "week"))) %>%
  group_by(Week, season, post_covid) %>%
  summarise(Incidents = n(), .groups = 'drop') %>%
  ungroup() %>%
  arrange(Week, season, post_covid)

# Reorder the 'season' variable
weekly_incidents_by_season$season <- factor(weekly_incidents_by_season$season, 
                                            levels = c("Spring", "Summer", "Autumn", "Winter"))

# Define date limits for the plot
start_date <- as.Date("2016-06-01")
end_date <- as.Date("2023-03-31")  

# Line plot
ggplot(weekly_incidents_by_season, aes(x = Week, y = Incidents)) +
  geom_segment(aes(xend = lead(Week), yend = lead(Incidents), color = season), size = .5) +
  scale_color_manual(name = "Season", 
                     values = c("Spring" = "green", "Summer" = "red", 
                                "Autumn" = "orange", "Winter" = "blue")) +
  ggtitle("Weekly Accident Rate in the Twin Cities Metro") +
  xlab("") +
  ylab("Number of Accidents") +
  scale_x_date(date_breaks = '1 month', date_labels = "%b %Y",
               limits = c(start_date, end_date),
               expand = c(0, 0)) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.5, size = rel(0.8))) +
  geom_smooth(data = subset(weekly_incidents_by_season, post_covid == 0),
              aes(x = Week, y = Incidents, linetype = "Pre-Covid"), 
              method = "lm", se = FALSE, color = "darkgray") +
   geom_smooth(data = subset(weekly_incidents_by_season, post_covid == 1),
              aes(x = Week, y = Incidents, linetype = "Post-Covid"), 
              method = "lm", se = FALSE, color = "black") +
   scale_linetype_manual(name = "Trend Lines",
                        values = c("Pre-Covid" = "dashed", "Post-Covid" = "dashed"),
                        labels = c("Pre-Covid", "Post-Covid"),
                        guide = guide_legend(override.aes = list(color = c("Pre-Covid" = "darkgray",   "Post-Covid" = "black"))))

```

The weekly accident rate was trending upwards pre-COVID, but there's a noticeable shift during the post-COVID period as the trend seems to flatten out while the seasonality becomes more pronounced.

### Number of Accidents by Hour of Day

```{r}
# Create data frames with counts of incidents for each hour, pre and post Covid
hourly_incidents_pre_covid <- met %>%
  filter(post_covid == 0) %>%
  group_by(start_hour) %>%
  summarise(Count = n())

hourly_incidents_post_covid <- met %>%
  filter(post_covid == 1) %>%
  group_by(start_hour) %>%
  summarise(Count = n())

# Combine the data
combined_hourly_incidents <- bind_rows(
  mutate(hourly_incidents_pre_covid, Period = "Pre-Covid"),
  mutate(hourly_incidents_post_covid, Period = "Post-Covid")
)

# Convert 'Period' to a factor with levels in the desired order
combined_hourly_incidents$Period <- factor(combined_hourly_incidents$Period, 
                                           levels = c("Pre-Covid", "Post-Covid"))

# Line plot of incidents by hour of the day
ggplot(combined_hourly_incidents, aes(x=start_hour, y=Count, color=Period)) +
  geom_smooth(se=F, method = "loess", span = 0.2) + 
  scale_color_manual(values=c("#0066FF", "red")) +  
  ggtitle("Number of Accidents by Hour of the Day") +
  xlab("Hour of the Day") +
  ylab("Number of Accidents") +
  theme_minimal() +
  theme(legend.position="top")

```

Reminder: there are 45 months worth of data for the pre-COVID period and 37 months of data for the post-COVID period. I believe the length of these two periods are close enough for general comparison purposes, but it's important to note that all else being equal, there should be higher counts in the pre-COVID period. However, there are actually 65,459 accidents recorded post-COVID compared with only 56,054 pre-COVID.

```{r, include = FALSE}
met %>% 
  group_by(post_covid) %>% 
  summarise(count = n())
```

### Length of Section of Road Affected When Accidents Occur

```{r}
# Boxplots for length of road affected
ggplot(met, aes(y = factor(post_covid, levels = c(1, 0)), x = `Distance(mi)`, fill = factor(post_covid, levels = c(1, 0)))) +
  geom_boxplot(outlier.size = 1, orientation = "y") +
  scale_fill_manual(values = c("red", "#0066FF")) +
  scale_y_discrete(labels = c("1" = "Post-Covid", "0" = "Pre-Covid")) +
  labs(title = "Length of Section of Road Affected When Accidents Occur",
       y = "",
       x = "Distance (mi)") +
  theme_minimal() +
  theme(
    axis.title.y = element_blank(),
    axis.text.y = element_text(angle = 45, hjust = 1),
    legend.position = "none"
  ) +
  coord_cartesian(xlim = c(0, 2.5))
```

For each observed accident, the length in miles of the stretch of road that was affected was recorded. Before COVID, the median distance was 0 miles and the mean was 0.48 miles. After COVID, the median distance affected was 0.43 miles while the mean was 0.85 miles.

```{r, include=FALSE}
# Distance stats
median_dist_pre_covid <- median(accidents_pre_covid$`Distance(mi)`, na.rm = TRUE)
median_dist_post_covid <- median(accidents_post_covid$`Distance(mi)`, na.rm = TRUE)
median_dist_difference <- median_dist_post_covid - median_dist_pre_covid
cat("Median Distance Pre-COVID:", median_dist_pre_covid, "\n")
cat("Median Distance Post-COVID:", median_dist_post_covid, "\n")

mean_dist_pre_covid <- mean(accidents_pre_covid$`Distance(mi)`, na.rm = TRUE)
mean_dist_post_covid <- mean(accidents_post_covid$`Distance(mi)`, na.rm = TRUE)
mean_dist_difference <- mean_dist_post_covid - mean_dist_pre_covid
cat("mean Distance Pre-COVID:", mean_dist_pre_covid, "\n")
cat("mean Distance Post-COVID:", mean_dist_post_covid, "\n")
```
